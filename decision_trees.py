# -*- coding: utf-8 -*-
"""Decision Trees

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROf1Lagk_-3I04gBk19OVMPaB7R9AJfF

Develop a classification model using Decision Tree Algorithm
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# Dataset

"""
Imagine that you are a medical researcher compiling data for a study. You have collected data about a set of patients, all of whom suffered from the same illness. During their course of treatment, each patient responded to one of 5 medications, Drug A, Drug B, Drug c, Drug x and y.

Part of your job is to build a model to find out which drug might be appropriate for a future patient with the same illness. The feature sets of this dataset are Age, Sex, Blood Pressure, and Cholesterol of patients, and the target is the drug that each patient responded to.

It is a sample of multiclass classifier, and you can use the training part of the dataset to build a decision tree, and then use it to predict the class of a unknown patient, or to prescribe it to a new patient. 

"""

# Downloading the Data

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%203/data/drug200.csv"

df = pd.read_csv(url,delimiter=",")
df[0:5]
df.head()

df.describe()

# Pre Processing

"""
Using my_data as the Drug.csv data read by pandas, declare the following variables:

    X as the Feature Matrix (data of my_data)
    y as the response vector (target)


"""

# Remove the column containing the target name since it doesn't contain numeric values.

X = df[["Age", "Sex", "BP", "Cholesterol", "Na_to_K"]].values
X[0:5]

# As you may figure out, some features in this dataset are categorical such as Sex or BP. Unfortunately, Sklearn Decision Trees do not handle categorical variables. But still we can convert these features to numerical values. pandas.get_dummies() Convert categorical variable into dummy/indicator variables.

from sklearn import preprocessing

le_sex = preprocessing.LabelEncoder()
le_sex.fit(['F','M'])
X[:,1] = le_sex.transform(X[:,1]) 


le_BP = preprocessing.LabelEncoder()
le_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])
X[:,2] = le_BP.transform(X[:,2])

le_Chol = preprocessing.LabelEncoder()
le_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = le_Chol.transform(X[:,3]) 

X[0:5]

# Fill the target variable

y = df["Drug"]
y[0:5]

"""
Setting up the Decision Tree
"""

from sklearn.model_selection import train_test_split

"""
Now train_test_split will return 4 different parameters. We will name them:
X_trainset, X_testset, y_trainset, y_testset

The train_test_split will need the parameters:
X, y, test_size=0.3, and random_state=3.

The X and y are the arrays required before the split, the test_size represents the ratio of the testing dataset, and the random_state ensures that we obtain the same splits.

"""
X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)

"""Modeling"""

"""
We will first create an instance of the DecisionTreeClassifier called drugTree.
Inside of the classifier, specify criterion="entropy" so we can see the information gain of each node.
"""

drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
drugTree  # it shows the default parameters

drugTree.fit(X_trainset,y_trainset)

"""Prediction"""

# Make some predictions on the testing dataset and store it into a variable called predTree. 

predTree = drugTree.predict(X_testset)

print(predTree [0:5])
print(y_testset[0:5])

"""Evaluation"""

# Import metrics from sklearn and check the accuracy of our model. 

from sklearn import metrics

import matplotlib.pyplot as plt

print("DecisionTrees's Accuracy:     ", metrics.accuracy_score(y_testset, predTree))

"""Visualization"""

# Commented out IPython magic to ensure Python compatibility.
# Notice: You might need to uncomment and install the pydotplus and graphviz libraries if you have not installed these before
#!conda install -c conda-forge pydotplus -y
#!conda install -c conda-forge python-graphviz -y

from io import  StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree
# %matplotlib inline

dot_data = StringIO()
filename = "drugtree.png"
featureNames = df.columns[0:5]
targetNames  = df["Drug"].unique().tolist()
out = tree.export_graphviz(drugTree,feature_names=featureNames, out_file=dot_data, class_names= np.unique(y_trainset), filled=True,  special_characters=True,rotate=False)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200))
plt.imshow(img,interpolation="nearest")